<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.yiban.mybatis.dev.mapper.StudentMapper"就是com.yiban.mybatis.dev.mapper(包名)+StudentMapper(StudentMapper.xml文件去除后缀)
 -->
<mapper namespace="com.yiban.mybatis.dev.mapper.StudentMapper">

    <sql id="Base_Column_List">
        student_id,name,phone,email,sex,locked,gmt_created,gmt_modified
    </sql>

    <resultMap id="BaseResultMap" type="com.yiban.mybatis.dev.entity.Student">
        <id column="student_id" jdbcType="INTEGER" property="studentId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="sex" jdbcType="TINYINT" property="sex"/>
        <result column="locked" jdbcType="TINYINT" property="locked"/>
        <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
    </resultMap>

    <select id="selectByStudentSelective" resultMap="BaseResultMap" parameterType="student">
        select
        <include refid="Base_Column_List"></include>
        from student
        where 1=1
        <if test="name != null and name != ''">
            and name like concat ('%',#{name},'%')
        </if>
        <if test="sex != null">
            and sex = ${sex}
        </if>
    </select>


    <select id="selectByIdOrName" resultMap="BaseResultMap" parameterType="student">
        select
        <include refid="Base_Column_List"/>
        from student
        <where>
            <choose>
                <when test="studentId != 0">
                    and student_id = #{studentId}
                </when>
                <when test="name != null and name != ''">
                    and name=#{name}
                </when>
                <otherwise>
                    and 1=2
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- flushCache="true"表示会清空本地和二级缓存（默认是false） useCache默认为true，表示会将本条语句的结果进行二级缓存  -->
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where student_id=#{student_id, jdbcType=INTEGER}
    </select>

    <!-- <![CDATA[ id <> #{id} ]]>  表示不等于
    where gmt_created &gt;= #{bTime, jdbcType=TIMESTAMP} and gmt_created &lt;= #{eTime, jdbcType=TIMESTAMP}
    -->
    <select id="selectBetweenCreatedTime" parameterType="java.util.Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where gmt_created &gt;= #{bTime} and gmt_created &lt;= #{eTime}
    </select>


    <!-- 参数已经在接口方法中指定 -->
    <select id="selectBetweenCreatedTimeAnno" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where gmt_created &gt;= #{bTime, jdbcType=TIMESTAMP} and gmt_created &lt;= #{eTime, jdbcType=TIMESTAMP}
    </select>


    <select id="selectByStudentBind" resultMap="BaseResultMap" parameterType="student">
        select
        <include refid="Base_Column_List"/>
        from student
        where 1=1
        <if test="name != null and name !=''">
            <bind name="nameLike" value="'%'+name+'%'"/>
            and name like #{nameLike}
        </if>
        <if test="sex != null">
            and sex=#{sex}
        </if>
    </select>

    <!--
     trim标签的作用
     prefix => 给sql语句拼接的前缀
     suffix	=> 给sql语句拼接的后缀
     prefixOverrides => 去除sql语句前面的关键字或者字符 由prefixOverrides指定
     suffixOverrides => 去除sql语句后面的关键字或者字符 由suffixOverrides指定
    -->
    <select id="selectByStudentSelectiveWhereTag" resultMap="BaseResultMap"
            parameterType="student">
        select
        <include refid="Base_Column_List"/>
        from student
        <trim prefix="where"  prefixOverrides="or|and">
            <if test="name != null and name !=''">
                AND name like concat('%', #{name}, '%')
            </if>
            <if test="sex != null">
                AND sex=#{sex}
            </if>
        </trim>
    </select>

    <select id="selectByStudentIdList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where student_id in
        <foreach collection="ids" item="id" open="(" close=")" separator="," index="i">
            #{id}
        </foreach>
    </select>

    <insert id="insertSelective" parameterType="student">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                student_id,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="locked != null">
                locked,
            </if>
            <if test="gmtCreated != null">
                gmt_created,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null">
                #{studentId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=TINYINT},
            </if>
            <if test="locked != null">
                #{locked,jdbcType=TINYINT},
            </if>
            <if test="gmtCreated != null">
                #{gmtCreated,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <insert id="insertList">
        insert into student(name, phone, email, sex, locked)
        values
        <foreach collection="list" item="student" separator=",">
            (
            #{student.name}, #{student.phone},#{student.email},
            #{student.sex},#{student.locked}
            )
        </foreach>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="student">
        update student
        <set>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="locked != null">
                locked = #{locked,jdbcType=TINYINT},
            </if>
            <if test="gmtCreated != null">
                gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            </if>
        </set>
        where student_id = #{studentId,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="student">
    update student
    set
    name=#{name, jdbcType=VARCHAR}, phone=#{phone, jdbcType=VARCHAR}, email=#{email, jdbcType=VARCHAR},
    sex=#{sex, jdbcType=VARCHAR}, locked=#{locked, jdbcType=VARCHAR}
    where student_id=#{studentId, jdbcType=INTEGER}
  </update>

</mapper>